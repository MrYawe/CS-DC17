
/*_____________________________________________________________

Projet d'optimisation stochastique 2017
Arnaud Steinmetz - Yannis Weishaupt
Assignation de sessions/papiers à un calendrier sur les données du CS-DC15
_______________________________________________________________*/

\User declarations :

#include <string>
#include <cstring>

#include <iostream>
#include <fstream>

#include <cstdio>
#include <cstdlib>

#include <vector>
#include <algorithm>
#include <regex>
#include <iomanip>      // std::get_time
#include <ctime>        // struct std::tm


#define NB_SESSIONS 54 	/* Nombre de sessions */
#define NB_PAPERS 263 	/* Nombre de papers à placer */
#define NB_DAYS 2


using namespace std;


/* ---------------------------------------------------------------------------- */
/* Valeurs permettant la sélection par la fitness des individus :				*/

#define VALERR0 100000	/* Valeur de pénalité contrainte oblig : eSession superposés avec track15 et papers de même eSession superposé*/
#define VALERR1 1000	/* Valeur de pénalité contrainte forte : papers de même eSession éloigné */

#define VALBON0 1		/* Valeur de bonus faible : éloignement entre eSession*/
#define VALBON1 100		/* Valeur de bonus moyen : respect créneau*/


#define NB_PAPERS_BY_SESSION 50

/* Valeurs du fichier input */
#define PAPER_ID 0
#define TRACK_ID 1
#define SESSION_ID 2
#define DURATION 3
#define UTC 4
#define CONSTRAINT_1 5
#define CONSTRAINT_2 6
#define CONSTRAINT_3 7

/* Classe représentant des contraintes avec une date de début et une date de fin */
class Constraint {
	public:Date start;				/* Début de la contrainte	*/
	public:Date end;				/* Fin de la contrainte		*/
};

/* Classe représentant un papier. */
class Paper {
	public:int ID;						/* Identifiant du papier 	*/
	public:int TrackID;					/* Identifiant du track		*/
	public:int SessionID;				/* Identifiant de la session*/
	//int posSession;					/* Position dans la session */
	public:int duration;				/* Durée du passage			*/
	public:double timezone;				/* fuseau horaire 			*/

	public:vector<Constraint> day1;	/* Contraintes du jour 1	*/
	public:vector<Constraint> day2;	/* Contraintes du jour 2	*/
	public:vector<Constraint> day3;	/* Contraintes du jour 3	*/

	//public:Date date;					/* Date de passage 			*/
};

/* Classe représentant un Session. */
class Session {
	public:int ID;
	public:int TrackID;
	public:int duration;
	public:vector<Paper*> papers;
};

/* Classe représentant un Track. */
class Track {
	public:int ID;
	public:vector<Session*> sessions;
};



/********************************************************************************/
/******///             DECLARATION DES VARIABLES GLOBALES               ///******/
/********************************************************************************/

float pMutPerGene = 0.5;		/* probabilité de mutation d'un attribut par individu*/

clock_t	start, finish;			/* Pour estimer le temps de calcul	*/
double runDuration;				/* temps de calcul					*/

Constraint* eventDate; 			/* Date de l'événement	 			*/

vector<Track*> tracks; 			/* Liste contenant tous les e-tracks 		*/

struct tm eventStart; 			/* Date du début de l'event */
struct tm eventEnd; 			/* Date de fin de l'event */

/* ---------------------------------------------------------------------------- */
\end

\User functions:
/********************************************************************************/
/******///             DECLARATION DES FONCTIONS GLOBALES               ///******/
/********************************************************************************/

//Fonction permettant d'afficher l'heure/min de début et fin de contrainte
void displayConstraint(Constraint c) {
	cout << "    " << c.start.hour << "h" << c.start.min << " à " << c.end.hour << "h" << c.end.min << endl;
}

//Fonction permettant d'afficher une date
void displayDate(Date d) {
	cout << "    jour: " << d.nday << " " << d.hour << ":" << d.min << ":" << d.sec << endl;
}

//Setting starting date
void setStartingDate(int year, int month, int day, int hour) {
	eventStart.tm_sec = 0;
	eventStart.tm_min = 0;
	eventStart.tm_hour = hour;
	eventStart.tm_mday = day;
	eventStart.tm_mon = month - 1;
	eventStart.tm_year = year - 1900;
}

void setEndingDate(int year, int month, int day, int hour) {
	eventEnd.tm_sec = 0;
	eventEnd.tm_min = 0;
	eventEnd.tm_hour = hour;
	eventEnd.tm_mday = day;
	eventEnd.tm_mon = month - 1;
	eventEnd.tm_year = year - 1900;
}




void drawWithoutReplacement(int* src, int* dest, int n) {
	for (int k = 0; k < n; k++) {
		int index = random(k, n);
		int val = src[index];
		dest[k] = val;
		src[index] = src[k];
		src[k] = val;
	}
}

void swapValues(int* tab, int i1, int i2) {
	int tmp = tab[i2];
	tab[i2] = tab[i1];
	tab[i1] = tmp;
}

// Switch n value of the array
void switchValues(int* tab, int size, int n) {
	for (int k = 0; k < n; k++) {
		int index1 = random(0, size);
		int index2 = random(0, size);
		int tmp = tab[index2];
		tab[index2] = tab[index1];
		tab[index1] = tmp;
	}
}

//Fonction retournant un pointeur vers le track dont l'ID est spécifié en paramètre
Track* findTrack(vector<Track*> tracks, int trackID) {
	for (unsigned i = 0; i < tracks.size(); i++) {
		if(tracks[i]->ID == trackID) {
			return tracks[i];
		}
	}
	return NULL;
}

//Fonction retournant un pointeur vers la session dont l'ID est spécifié en paramètre
Session* findSession(Track *track, int sessionID) {
	for (unsigned i = 0; i < track->sessions.size(); i++) {
		if(track->sessions[i]->ID == sessionID) {
			return track->sessions[i];
		}
	}
	return NULL;
}

//Fonction retournant un pointeur vers le paper dont l'ID est spécifié en paramètre
Paper* findPaper(Session *session, int paperID) {
	for (unsigned i = 0; i < session->papers.size(); i++) {
		if(session->papers[i]->ID == paperID) {
			return session->papers[i];
		}
	}
	return NULL;
}

//Extraction d'un vecteur de contrainte à partir d'un string
vector<Constraint> parseConstraints(string subject, int day) {
    vector<Constraint> res;
    std::regex re("\\[(\\d*):(\\d*),(\\d*):(\\d*)\\]");
    std::sregex_iterator next(subject.begin(), subject.end(), re);
    std::sregex_iterator end;

    while (next != end) {
        Constraint* cons = new Constraint();
        std::smatch matches = *next;

		Date d1;
		Date d2;

		d1.nday=day;
		d1.hour=stoi(matches[1].str());
		d1.min=stoi(matches[2].str());
		d1.sec=0;

		d2.nday=day;
		d2.hour=stoi(matches[3].str());
		d2.min=stoi(matches[4].str());
		d2.sec=0;

		cons->start = d1;
		cons->end = d2;

        res.push_back(*cons);
        next++;
    }

    return res;
}

//Fonction remplissant le vecteur de track à partir du txt en entrée
void readPapersFile() {
    std::string delimiter = "|";
    ifstream fPaper;
    fPaper.open("./papers.txt", ios::in);
    string line;
    if (fPaper.is_open()) {
        while ( getline (fPaper,line) ) {

            Paper* p = new Paper();
            int i = 0;
            size_t pos = 0;
            std::string token;

            while ((pos = line.find(delimiter)) != std::string::npos) {
                token = line.substr(0, pos);
                switch ( i ) {
                    case PAPER_ID:
                        p->ID = stoi(token);
                        break;
                    case TRACK_ID:
                        p->TrackID = stoi(token);
                        break;
                    case SESSION_ID:
                        p->SessionID = stoi(token);
                        break;
                    case DURATION:
                        p->duration = stoi(token);
                        break;
                    case UTC:
                        //p->timezone = std::stod(token); // string to float
                    	break;
                    case CONSTRAINT_1:
                        p->day1 = parseConstraints(token, 0);
                        break;
                    case CONSTRAINT_2:
                        p->day2 = parseConstraints(token, 1);
                        break;
                    case CONSTRAINT_3:
                        p->day3 = parseConstraints(token, 2);
                        break;
                }
                line.erase(0, pos + delimiter.length());
                i++;
            }

            //Vérification si le Track existe, sinon il est créé
			Track* track = findTrack(tracks, p->TrackID);
			if(track == NULL) {
				track = new Track();
				track->ID = p->TrackID;
				tracks.push_back(track);
			}

			//Vérification si la session existe déjà, sinon elle est créée 
			Session* session = findSession(track, p->SessionID);
			if(session == NULL) {
				session = new Session();
				session->ID = p->SessionID;
				session->TrackID = p->TrackID;
				session->duration = 0;
				track->sessions.push_back(session);
			}

			//Ajoute la durée du paper à la durée globale de la session
        	session->duration+=p->duration;

			//ajout du paper dans la session
			session->papers.push_back(p);
        }
    }
}

//Fonction permettant d'afficher un paper et ses attributs
void displayPapers(Paper p) {
    cout << "ID :" << p.ID << endl;
    cout << "TrackID :" << p.TrackID << endl;
    cout << "SessionID :" << p.SessionID << endl;
    cout << "duration :" << p.duration << endl;

    cout << "Disponibilités :" << endl;
    //Affichage des disponibilités
    cout << "  jour 1:" << endl;

    if(p.day1.size()!=0){
    	for(unsigned int i=0; i<p.day1.size(); i++)
		{
			displayConstraint(p.day1[i]);
		}
    } else {
		cout << "    Pas de contraintes" << endl;
    }

	cout << "  jour 2:" << endl;

    if(p.day2.size()!=0){
		for(unsigned int i=0; i<p.day2.size(); i++)
		{
			displayConstraint(p.day2[i]);
		}
	} else {
		cout << "    Pas de contraintes" << endl;
	}

	cout << "  jour 3:" << endl;
    if(p.day3.size()!=0){
		for(unsigned int i=0; i<p.day3.size(); i++)
		{
			displayConstraint(p.day3[i]);
		}
	} else {
		cout << "    Pas de contraintes" << endl;
	}


}

//Fonction permettant de convertir une date en minutes
int convertDateToMins(Date d) {
	return d.nday*24*60 + d.hour*60 + d.min;
}

//Fonction permettant de calculer le nombre de minutes de superpositions entre deux intervalles de dates
//La fonction renvoit une valeur positive pour une superposition
//La fonction renvoit une valeur négative dans le cas d'un éloignement entre les dates
//Les arguments doivent entre convertis en minute
int dateOverlapping(int date1_start, int date1_end, int date2_start, int date2_end) {
	int later;
	int early;

	if(date1_start>date2_start) {
		later=date1_start;
		//cout << "date 1 commence plus tard" << endl;
	} else {
		later=date2_start;
		//cout << "date 2 commence plus tard" << endl;
	}
	if(date1_end<date2_end) {
		early=date1_end;
		//cout << "date 1 fini plus tôt" << endl;
	} else {
		early=date2_end;
		//cout << "date 2 fini plus tôt" << endl;
	}
	int score = (early-later);
	if(score<0){ //TODO
		score=0;
	}

	return score;
}

//Fonction permettant de calculer le nombre de minutes de superpositions entre deux débuts de dates et leur durée
//La fonction renvoit une valeur positive pour une superposition
//La fonction renvoit une valeur négative dans le cas d'un éloignement entre les dates
//Les deux premiers arguments doivent être de type Date, les deux autres représentent un durée en seconde pour chaque date
int dateOverlappingMins(Date d1, Date d2, int dur1, int dur2) {
	int date1_start = convertDateToMins(d1);
	int date1_end = convertDateToMins(d1)+dur1;

	int date2_start = convertDateToMins(d2);
	int date2_end = convertDateToMins(d2)+dur2;

	int score = dateOverlapping(date1_start,date1_end,date2_start,date2_end);

	/*if(score<0) {
		score=0;
	}*/
	return score;
}

//Fonction permettant de calculer le nombre de minutes de superpositions entre une Date et une contrainte
//La fonction renvoit une valeur positive pour une superposition
//La fonction renvoit une valeur négative dans le cas d'un éloignement entre les dates
//Le premier argument est de type Date, le second est une durée en seconde, le 3eme est une Contrainte
int dateOverlappingMinsConstraints(Date d1, int dur1, Constraint c) {
	int date1_start = convertDateToMins(d1);
	int date1_end = convertDateToMins(d1)+dur1;

	int date2_start = convertDateToMins(c.start);
	int date2_end = convertDateToMins(c.end);

	int score = dateOverlapping(date1_start,date1_end,date2_start,date2_end);

	/*if(score<0) {
		score=0;
	}*/

	return score;
}

int evaluateOverlapingConstraints(Paper* currentPaper, int paperStart, int paperEnd) {

	vector<Constraint> day1;
	vector<Constraint> day2;
	vector<Constraint> day3;

	Date d_start;
	d_start.nday=0;
	d_start.hour=0;
	d_start.min=0;
	d_start.sec=0; 
	
	Date d_end;
	d_end.nday=0;
	d_end.hour=23;
	d_end.min=59;
	d_end.sec=59;

	int valueDisponibility=0;

	day1=currentPaper->day1;
	for(unsigned int c = 0;c<day1.size();c++){
		valueDisponibility += dateOverlapping(paperStart, paperEnd, convertDateToMins(day1[c].start), convertDateToMins(day1[c].end));
	}

	day2=currentPaper->day2;
	for(unsigned int c = 0;c<day2.size();c++){
		valueDisponibility += dateOverlapping(paperStart, paperEnd, convertDateToMins(day2[c].start), convertDateToMins(day2[c].end));
	}

	day3=currentPaper->day3;
	for(unsigned int c = 0;c<day3.size();c++){
		valueDisponibility += dateOverlapping(paperStart, paperEnd, convertDateToMins(day3[c].start), convertDateToMins(day3[c].end));
	}

	//the 3 following if assume that if not constraint is set, the person is disponible the whole day
	if(day1.size()==0) {
		d_start.nday=0;
		d_end.nday=0;
		valueDisponibility += dateOverlapping(paperStart, paperEnd, convertDateToMins(d_start), convertDateToMins(d_end));
	}

	if(day2.size()==0) {
		d_start.nday=1;
		d_end.nday=1;
		valueDisponibility += dateOverlapping(paperStart, paperEnd, convertDateToMins(d_start), convertDateToMins(d_end));
	}

	if(day3.size()==0) {
		d_start.nday=2;
		d_end.nday=2;
		valueDisponibility += dateOverlapping(paperStart, paperEnd, convertDateToMins(d_start), convertDateToMins(d_end));
	}

	//if the paper is completely 
	if(valueDisponibility==currentPaper->duration-1 || valueDisponibility==currentPaper->duration) {
		//double the bonus added bonus in case of completly fitting
		valueDisponibility*=2;
	}
	return valueDisponibility;
}



/* ---------------------------------------------------------------------------- */
\end

\User CUDA:
//Transfert some variables to GPU here (cudaMalloc, MemCpy)
\end


/* ---------------------------------------------------------------------------- */

/********************************************************************************/
/*********///             DECLARATION DES CLASSES               ///**************/
/********************************************************************************/
\User classes :
Date {
	int sec;
	int min;
	int hour;
	int nday;
}

Match {
	int sessionID;
	int trackID;
	int duration;
	int order[NB_PAPERS_BY_SESSION];
	int nbPapers;
	Date date;
}

GenomeClass {
	Match match[NB_SESSIONS];
}
\end

\Before everything else function:
	// Start clock to compute running time afterwards
	start = clock();

	// Set event starting date
	setStartingDate(2015, 5, 29, 6);
	setEndingDate(2015, 5, 31, 6);

	// Load data from TXT
	readPapersFile();

\end


\After everything else function:
	// Stop clock to compute time afterwards
	finish = clock();

	// Compute run time
	runDuration = (double)(finish - start) / CLOCKS_PER_SEC;
	printf("TEMPS D'EXECUTION\t:\t%2.1f secondes\n", runDuration );


	// Save an output txt 
	// Format is 
	// PaperID TrackID day-month-year hour:min:sec
	ofstream outputFile;
	ofstream outputCal;
	outputFile.open ("result.txt");
	outputCal.open ("events.ics");

	time_t eventStartTime = mktime(&eventStart);
	tm* eventStartTest = localtime(&eventStartTime);
	printf ("START EVENT: %s", asctime(eventStartTest));

	outputCal << "BEGIN:VCALENDAR\nVERSION:2.0\nPRODID:-//hacksw/handcal//NONSGML v1.0//EN\n";


	for (unsigned int i = 0; i < NB_SESSIONS; i++) {
		int secSinceEventStart = convertDateToMins(bBest->match[i].date)*60;
		time_t timeSessionStart = mktime(&eventStart) + secSinceEventStart - (eventStart.tm_hour*60*60);
		//tm* dateSessionStart = localtime(&timeSessionStart);

		Track *currentTrack = findTrack(tracks, bBest->match[i].trackID);
		Session *currentSession = findSession(currentTrack, bBest->match[i].sessionID);

		int secSinceSessionStart = 0;
		for (size_t j = 0; j < currentSession->papers.size(); j++) {
			Paper *currentPaper = findPaper(currentSession, bBest->match[i].order[j]);

			time_t timePaperStart = timeSessionStart + secSinceSessionStart;
			tm* datePaperStart = localtime(&timePaperStart);

			char buffer [80];
			strftime(buffer, 80, "%d-%m-%Y %T", datePaperStart);
			outputFile << currentPaper->ID << " " << currentPaper->TrackID << " " << buffer << endl;

			secSinceSessionStart += currentPaper->duration*60;

			time_t timePaperEnd = timeSessionStart + secSinceSessionStart;
			tm* datePaperEnd = localtime(&timePaperEnd);

			strftime(buffer, 80, "%Y%m%dT%H%M%SZ", datePaperStart); // exemple: 19970714T170000Z
			outputCal << "BEGIN:VEVENT\n";
			outputCal << "DTSTART:" << buffer << "\n";
			strftime(buffer, 80, "%Y%m%dT%H%M%SZ", datePaperEnd); // exemple: 19970714T170000Z
			outputCal << "DTEND:" << buffer << "\n";
			outputCal << "SUMMARY:" << currentPaper->ID << "\n";
			outputCal << "END:VEVENT\n";
		}
	}
	outputCal << "END:VCALENDAR\n";

	outputFile.close();
	outputCal.close();


	std::cout << "bbest :" << bBest->match[0].date.nday << " " << bBest->match[0].date.hour<< " " << bBest->match[0].date.min << endl;
	std::cout << "Best score :" << bBest->evaluate() << endl;
	/*
	int tab[tracks[0]->sessions[0]->papers.size()];
	int drawBox[tracks[0]->sessions[0]->papers.size()];
	for (unsigned int k = 0; k < tracks[0]->sessions[0]->papers.size() ; k++) {
		drawBox[k] = tracks[0]->sessions[0]->papers[k]->ID;
	}
	drawWithoutReplacement(drawBox, tab, tracks[0]->sessions[0]->papers.size());

	for (unsigned int i = 0; i < tracks[0]->sessions[0]->papers.size(); i++) {
		std::cout << "Order: " << tab[i] << "\n";
	}

	switchValues(tab, tracks[0]->sessions[0]->papers.size(), 1);

	std::cout << "\n";
	for (unsigned int i = 0; i < tracks[0]->sessions[0]->papers.size(); i++) {
		std::cout << "Order: " << tab[i] << "\n";
	}*/

\end


\At the beginning of each generation function:
//cout << "At the beginning of each generation function called" << endl;
\end

\At the end of each generation function:
//cout << "At the end of each generation function called" << endl;
\end

\At each generation before reduce function:
//cout << "At each generation before replacement function called" << endl;
\end

\GenomeClass::display:
\end

\GenomeClass::initialiser : // "initializer" is also accepted
	int i = 0;
	for(unsigned int t = 0; t < tracks.size(); t++) {
		Track* track = tracks[t];
		for(unsigned int s = 0; s < track->sessions.size(); s++) {
			Session* session = track->sessions[s];

			Genome.match[i].nbPapers = session->papers.size();	//Setting the number of papers contained in the Session
			Genome.match[i].trackID = session->TrackID;			//Setting the trackID
			Genome.match[i].sessionID = session->ID;			//Setting the sessionID
			Genome.match[i].duration = session->duration;		//Setting the duration of the session

			//Draw position to set an order to the papers in the session
			int drawBox[session->papers.size()];
			for (unsigned int k = 0; k < session->papers.size() ; k++) {
				drawBox[k] = session->papers[k]->ID;
			}
			drawWithoutReplacement(drawBox, Genome.match[i].order, session->papers.size());

			Genome.match[i].date.nday = (int) random(0, NB_DAYS); 	//Setting the nday, representing the day number since the beginning

			if(Genome.match[i].date.nday)							//Si on ne tire pas au sort le premier jour
			{
				//si le dernier jour est tiré alors on soustrait la durée au démarrage possible pour éviter que la session dépasse l'événement
				if(Genome.match[i].date.nday == NB_DAYS-1) { 	
					int hoursToSubstract = Genome.match[i].duration/60+1;
					Genome.match[i].date.hour = (int) random(0,24-hoursToSubstract);
				} else { //Sinon on tire au sort entre 0 et 23
					Genome.match[i].date.hour = (int) random(0,24);
				}

				Genome.match[i].date.sec = 0;
				Genome.match[i].date.min = ((int) random(0,12))*5;	
			} else													//Si on tire au sort le premier jour
			{
				Genome.match[i].date.sec = 0;
				Genome.match[i].date.min = ((int) random(eventStart.tm_min/5,12))*5;	//Tirage au sort à partir de la minute de début
				Genome.match[i].date.hour = (int) random(eventStart.tm_hour,24);		//Tirage au sort à partir de l'heure de début
			}

			i++;
		}
	}
\end

\GenomeClass::crossover :
	// must create "child" out of "parent1" and "parent2"
	float limit = 0.5;

	for (unsigned int i=0; i<NB_SESSIONS; i++)
	{
		if((float)random(0.,1.) < limit)
		{ child.match[i].date = parent2.match[i].date; }
	}
\end

\GenomeClass::mutator : // Must return the number of mutations
	unsigned int nbMutations = 0;
	for(unsigned int i = 0; i < NB_SESSIONS; i++) {
		if (tossCoin(pMutPerGene)){		//toss coin pour mutation du jour
			Genome.match[i].date.nday = (int) random(0, NB_DAYS); 	//Setting the nday, representing the day number since the beginning
			nbMutations++; 
		}

		if(Genome.match[i].date.nday)	//Si on ne tire pas au sort le premier jour
		{
			if (tossCoin(pMutPerGene)){	//toss coint pour mutation de l'heure
				if(Genome.match[i].date.nday == NB_DAYS-1) { 	
					int hoursToSubstract = Genome.match[i].duration/60+1;
					Genome.match[i].date.hour = (int) random(0,24-hoursToSubstract);
				} else { //Sinon on tire au sort entre 0 et 23
					Genome.match[i].date.hour = (int) random(0,24);
				}
				nbMutations++; 
			}
			//Genome.match[i].date.sec = 0;
			if(tossCoin(pMutPerGene)) { //toss coin pour mutation de la minute
				Genome.match[i].date.min = ((int) random(0,12))*5;	
				nbMutations++; 
			}
		} 
		else { 							//Si on tire au sort le premier jour
			//Genome.match[i].date.sec = 0;
			if(tossCoin(pMutPerGene)) { //toss coin pour mutation de la minute
				Genome.match[i].date.min = ((int) random(eventStart.tm_min/5,12))*5;	//Tirage au sort à partir de la minute de début
				nbMutations++; 
			}
			if(tossCoin(pMutPerGene)) { //toss coin pour mutation de l'heure
				Genome.match[i].date.hour = (int) random(eventStart.tm_hour,24);		//Tirage au sort à partir de l'heure de début
				nbMutations++; 
			}
		}

		if(tossCoin(pMutPerGene)) { //toss coin pour mutation de l'ordre des papers
			int nbSwitch = random(0, Genome.match[i].nbPapers);
			switchValues(Genome.match[i].order, Genome.match[i].nbPapers, nbSwitch);
			nbMutations++; 
		}


	}
	return nbMutations;
\end

\GenomeClass::evaluator : // Returns the score as a real value
	// Must return an evaluation of the quality of the "Genome"
	//float val[NB_PAPERS];
	float res = 0.;
	float overlapTrack15 = 0.;
	float overlapDisponibility = 0.;

	//float overlapDisponibility = 0.;

	//Track* track15 = findTrack(tracks, 15);
	//Session* session15;

	int valueOverlap15=0;

	//Evaluator to let track 15 alone
	for(unsigned int s = 0; s < NB_SESSIONS; s++) { //get track 15 sessions
		if(Genome.match[s].trackID == 15) {
			for(unsigned int i = 0; i < NB_SESSIONS; i++) { //compare to other sessions dates

				if(Genome.match[i].trackID == 15 && Genome.match[i].sessionID == Genome.match[s].sessionID) {
					//Case were comparing the sessions with itself : Nothing to do
				} else {
					//substraction the amount of overlap to the overlapScore
					valueOverlap15=dateOverlappingMins(Genome.match[i].date, Genome.match[s].date, Genome.match[i].duration, Genome.match[s].duration);
					//overlapTrack15-=(valueOverlap15<0)?0:valueOverlap15;
					overlapTrack15-=valueOverlap15;
				}
			}
		}
	}

	int valueDisponibility = 0;

	//s'il y a un quelconque overlapping avec un track 15 et une autre eSession, alors le score est mis à 0,
	//Car on ne souhaite garder que des calendriers qui respectent cette condition
	if(overlapTrack15<0) 
	{
		res=0;
	} else {
		Session* currentSession;
		Track* currentTrack;
		Paper* currentPaper;
		int currentPaperID;
		int sessionDateMins = 0;
		int currentDurationStart = 0;
		vector<Constraint> day1;
		vector<Constraint> day2;
		vector<Constraint> day3;

		//Date to use as constraint that will assume that if no constraint is set for a given day, the person is disponible the whole
		Date d_start;
		d_start.nday=0;
		d_start.hour=0;
		d_start.min=0;
		d_start.sec=0; 
		
		Date d_end;
		d_end.nday=0;
		d_end.hour=23;
		d_end.min=59;
		d_end.sec=59;

		vector<Paper*> papers;

		//Evaluator to respect the disponibility constraints
		for(unsigned int i = 0; i < NB_SESSIONS; i++) { //loop on sessions

			currentTrack = findTrack(tracks, Genome.match[i].trackID);
			currentSession = findSession(currentTrack, Genome.match[i].sessionID);

			currentDurationStart=0;
			sessionDateMins=convertDateToMins(Genome.match[i].date);

			valueDisponibility=0;

			for(int j = 0;j<Genome.match[i].nbPapers;j++) {
				currentPaperID = Genome.match[i].order[j];
				currentPaper = findPaper(currentSession, currentPaperID);


				
				//valueDisponibility=evaluateOverlapingConstraints(currentPaper, sessionDateMins+currentDurationStart, sessionDateMins+currentDurationStart+currentPaper->duration);
				
				day1=currentPaper->day1;
				for(unsigned int c = 0;c<day1.size();c++){
					valueDisponibility += dateOverlapping(sessionDateMins+currentDurationStart, sessionDateMins+currentDurationStart+currentPaper->duration, convertDateToMins(day1[c].start), convertDateToMins(day1[c].end));
				}

				day2=currentPaper->day2;
				for(unsigned int c = 0;c<day2.size();c++){
					valueDisponibility += dateOverlapping(sessionDateMins+currentDurationStart, sessionDateMins+currentDurationStart+currentPaper->duration, convertDateToMins(day2[c].start), convertDateToMins(day2[c].end));
				}

				day3=currentPaper->day3;
				for(unsigned int c = 0;c<day3.size();c++){
					valueDisponibility += dateOverlapping(sessionDateMins+currentDurationStart, sessionDateMins+currentDurationStart+currentPaper->duration, convertDateToMins(day3[c].start), convertDateToMins(day3[c].end));
				}

				//the 3 following if assume that if not constraint is set, the person is disponible the whole day
				if(day1.size()==0) {
					d_start.nday=0;
					d_end.nday=0;
					valueDisponibility += dateOverlapping(sessionDateMins+currentDurationStart, sessionDateMins+currentDurationStart+currentPaper->duration, convertDateToMins(d_start), convertDateToMins(d_end));
				}

				if(day2.size()==0) {
					d_start.nday=1;
					d_end.nday=1;
					valueDisponibility += dateOverlapping(sessionDateMins+currentDurationStart, sessionDateMins+currentDurationStart+currentPaper->duration, convertDateToMins(d_start), convertDateToMins(d_end));
				}

				if(day3.size()==0) {
					d_start.nday=2;
					d_end.nday=2;
					valueDisponibility += dateOverlapping(sessionDateMins+currentDurationStart, sessionDateMins+currentDurationStart+currentPaper->duration, convertDateToMins(d_start), convertDateToMins(d_end));
				}

				//if the paper is completely 
				if(valueDisponibility==currentPaper->duration-1 || valueDisponibility==currentPaper->duration) {
					//double the bonus added bonus in case of completly fitting
					valueDisponibility*=2;
				}

				currentDurationStart+=currentPaper->duration;
				overlapDisponibility+=valueDisponibility;
				//overlapping = durée du papier à 1 min près ajout bonus
			}
		}

		//cout<<"disponibility: "<<overlapDisponibility<<endl;
		res+=overlapTrack15;
		//cout << "over : " <<overlapTrack15*100 << endl;
		res+=overlapDisponibility;
		//cout << overlapDisponibility <<endl;
	}



  	return res;
\end

\User Makefile options:
CPPFLAGS+=-std=c++11
\end


\Default run parameters :        // Please let the parameters appear in this order
  Number of generations : 150    // NB_GEN
  Time limit: 0 			           // In seconds, 0 to deactivate
  Population size : 64		   //POP_SIZE
  Offspring size : 64// or a xx%
  Mutation probability : 1       // MUT_PROB
  Crossover probability : 1      // XOVER_PROB
  Evaluator goal : maximise      // maximise
  Selection operator: Tournament 2.0
  Surviving parents: 100%        // Percentage or absolute
  Surviving offspring: 100%      // Percentage or absolute  d
  Reduce parents operator: Tournament 2
  Reduce offspring operator: Tournament 2
  Final reduce operator: Tournament 2

  Elitism: strong			           // Weak or Strong
  Elite: 1
  Print stats: true				       // Default: 1
  Generate csv stats file:true
  Generate gnuplot script:false
  Generate R script:false
  Plot stats:true				         // Default: 0

  //Remote island model: true
  //IP file: ip.txt 			         // List of IP:PORT of islands to send individuals to
  Migration probability: 0.2    // Probability of sending an individual per generation
  //Server port : 2929

  Save population: false
  //Start from file:false
\end
